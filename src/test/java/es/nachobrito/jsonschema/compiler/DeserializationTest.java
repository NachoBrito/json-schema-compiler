/*
 *    Copyright 2024 Nacho Brito
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package es.nachobrito.jsonschema.compiler;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.time.LocalDate;
import java.util.UUID;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

public class DeserializationTest extends CompilerTest {

  @DisplayName("JSON documents following schemas can be deserialized to generated classes")
  @Test
  void expectJsonDocumentsDeserializable()
      throws IOException,
          ClassNotFoundException,
          NoSuchMethodException,
          InvocationTargetException,
          IllegalAccessException {
    var schema =
        """
        {
          "$id": "https://example.com/person.schema.json",
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "title": "User",
          "type": "object",
          "properties": {
            "user_name": {
              "type": "string"
            },
            "date-of-birth": {
              "type": "string",
              "format": "date"
            },
            "uuid": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
        """;
    var theUUID = UUID.randomUUID();
    var json =
        """
        {
            "user_name": "John Doe",
            "date-of-birth": "1970-04-01",
            "uuid": "%s"
        }
"""
            .formatted(theUUID.toString());
    var mapper = new ObjectMapper().registerModule(new JavaTimeModule());

    //First, verify deserialization works for the equivalent manually generated record:
    record User2(
        @JsonProperty("user_name") String userName,
        @JsonProperty("date-of-birth") LocalDate dateOfBirth,
        @JsonProperty("uuid") UUID uuid) {}
    var user0 =
        mapper.readValue(json, User2.class);

    //Then, verify that deserialization works for the generated bytecode too
    var cls = compileSampleSchemaFromString(schema, "User");
    var user = mapper.readValue(json, cls);

    assertNotNull(user);
    assertEquals("John Doe", cls.getDeclaredMethod("userName").invoke(user));
    assertEquals(LocalDate.parse("1970-04-01"), cls.getDeclaredMethod("dateOfBirth").invoke(user));
    assertEquals(theUUID, cls.getDeclaredMethod("uuid").invoke(user));
  }
}
